function doGet() {
  let template = HtmlService.createTemplateFromFile('index');
  let html = template.evaluate().setTitle('Registro de Asistencia');
  html.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  html.addMetaTag('viewport', 'width=device-width, initial-scale=1');
  return html;
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function obtenerDatosAlumno(codigoQR) {
  var hojaAlumnos = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Alumnos");
  var datosAlumnos = hojaAlumnos.getDataRange().getValues();
  for (var i = 1; i < datosAlumnos.length; i++) {
    if (datosAlumnos[i][4] === codigoQR && datosAlumnos[i][5] === "ACTIVO") { // CódigoQR en columna 5 (índice 4), Estado en columna 6 (índice 5)
      return {
        AlumnoID: datosAlumnos[i][0],
        AlumnoNombre: datosAlumnos[i][1],
        GrupoID: datosAlumnos[i][2]
      };
    }
  }
  return null;
}

function calcularDistancia(lat1, lon1, lat2, lon2) {
  const R = 6371; // Radio de la Tierra en km
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // Distancia en km
}

function registrarAsistencias(asistencias) {
  var hojaAsistencia = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Asistencia");
  if (!hojaAsistencia) {
    return "Error: No se encontró la hoja de Asistencia.";
  }

  var fecha = new Date();
  var fechaStr = Utilities.formatDate(fecha, "America/Lima", "dd/MM/yyyy");
  var horaStr = Utilities.formatDate(fecha, "America/Lima", "HH:mm:ss");

  var registrosExitosos = 0;
  var registrosDuplicados = 0;
  var registrosFueraDeRango = 0;

  // Obtener todos los registros de asistencia
  var datosAsistencia = hojaAsistencia.getDataRange().getValues();

  // Coordenadas de la escuela
  const escuelaLat = -12.16890902346348;
  const escuelaLon = -76.99744372733122;
  const radioPermitido = 0.485; // Radio permitido en kilometros

  // Definir los rangos de asistencia en horas
  const rangoAsistio1 = { llegadaPronto: "06:00", inicio: "07:10", fin: "12:00" }; // turno mañana
  const rangoAsistio2 = { llegadaPronto: "18:00", inicio: "18:10", fin: "17:20" }; // turno tarde

  for (var i = 0; i < asistencias.length; i++) {
    var codigoQR = asistencias[i].codigoQR;
    var ubicacion = asistencias[i].ubicacion.split(", ");
    var latitud = parseFloat(ubicacion[0]);
    var longitud = parseFloat(ubicacion[1]);

    // Verificar si la ubicación está dentro del radio permitido
    var distancia = calcularDistancia(latitud, longitud, escuelaLat, escuelaLon);
    if (distancia > radioPermitido) {
      registrosFueraDeRango++;
      continue; // Saltar este registro si está fuera del rango
    }

    // Obtener datos del alumno
    var alumno = obtenerDatosAlumno(codigoQR);
    if (!alumno) {
      continue; // Saltar si no se encuentra el alumno
    }

    // Verificar si el alumno ya fue registrado hoy
    var existeRegistro = datosAsistencia.some(function (fila) {
      var alumnoIDRegistro = fila[1]; // AlumnoID en columna 2 (índice 1)
      var fechaRegistro = fila[4]; // Fecha en columna 5 (índice 4)
      var fechaRegistroStr = Utilities.formatDate(new Date(fechaRegistro), "America/Lima", "dd/MM/yyyy");

      // Comparar AlumnoID y Fecha
      return alumnoIDRegistro === alumno.AlumnoID && fechaRegistroStr === fechaStr;
    });

    if (existeRegistro) {
      registrosDuplicados++;
      continue; // Saltar este registro si ya existe
    }

    // Convertir la hora actual a formato HH:mm
    var horaActual = Utilities.formatDate(fecha, "America/Lima", "HH:mm");

    // Función para convertir una hora en formato HH:mm a minutos desde la medianoche
    function convertirHoraAMinutos(hora) {
      var partes = hora.split(":");
      return parseInt(partes[0]) * 60 + parseInt(partes[1]);
    }

    // Convertir las horas de los rangos a minutos
    var llegadaPronto1 = convertirHoraAMinutos(rangoAsistio1.llegadaPronto);
    var inicio1 = convertirHoraAMinutos(rangoAsistio1.inicio);
    var fin1 = convertirHoraAMinutos(rangoAsistio1.fin);

    var llegadaPronto2 = convertirHoraAMinutos(rangoAsistio2.llegadaPronto);
    var inicio2 = convertirHoraAMinutos(rangoAsistio2.inicio);
    var fin2 = convertirHoraAMinutos(rangoAsistio2.fin);

    // Convertir la hora actual a minutos
    var horaActualMinutos = convertirHoraAMinutos(horaActual);

    var tipoAsistencia;

    // Verificar si la hora actual está dentro de los rangos de asistencia
    if (
      (horaActualMinutos >= llegadaPronto1 && horaActualMinutos < inicio1) ||
      (horaActualMinutos >= llegadaPronto2 && horaActualMinutos < inicio2)

    ) {
      tipoAsistencia = "ASISTIÓ";
    } else if (
      (horaActualMinutos >= inicio1 && horaActualMinutos <= fin1) ||
      (horaActualMinutos >= inicio2 && horaActualMinutos <= fin2)
    ) {
      tipoAsistencia = "TARDANZA";
    } else {
      tipoAsistencia = "INASISTENCIA"; // Si no está en ningún rango
    }

    // Generar AsistenciaID
    var asistenciaID = Math.random().toString(36).substr(2, 8).toUpperCase();

    // Registrar la asistencia
    var nuevaFila = [
      asistenciaID,
      alumno.AlumnoID,
      alumno.AlumnoNombre,
      alumno.GrupoID,
      fechaStr,
      horaStr,
      tipoAsistencia,
      "", // Comentario (vacío por defecto)
      codigoQR,
      ubicacion.join(", ")
    ];
    hojaAsistencia.appendRow(nuevaFila);
    registrosExitosos++;
  }

  return `Registros exitosos: ${registrosExitosos}, Registros duplicados: ${registrosDuplicados}, Registros fuera de rango: ${registrosFueraDeRango}`;
}
